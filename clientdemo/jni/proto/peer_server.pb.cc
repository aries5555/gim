// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "peer_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace gim {

void protobuf_ShutdownFile_peer_5fserver_2eproto() {
  delete GetPeerMessageRequest::default_instance_;
  delete GetPeerMessageResponse::default_instance_;
  delete SendPeerMessageRequest::default_instance_;
  delete SendPeerMessageResponse::default_instance_;
  delete RecvPeerMessageResponse::default_instance_;
  delete PushMessageRequest::default_instance_;
  delete PushMessageResponse::default_instance_;
  delete PeerPacket::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_peer_5fserver_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_peer_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::gim::protobuf_AddDesc_message_2eproto();
  GetPeerMessageRequest::default_instance_ = new GetPeerMessageRequest();
  GetPeerMessageResponse::default_instance_ = new GetPeerMessageResponse();
  SendPeerMessageRequest::default_instance_ = new SendPeerMessageRequest();
  SendPeerMessageResponse::default_instance_ = new SendPeerMessageResponse();
  RecvPeerMessageResponse::default_instance_ = new RecvPeerMessageResponse();
  PushMessageRequest::default_instance_ = new PushMessageRequest();
  PushMessageResponse::default_instance_ = new PushMessageResponse();
  PeerPacket::default_instance_ = new PeerPacket();
  GetPeerMessageRequest::default_instance_->InitAsDefaultInstance();
  GetPeerMessageResponse::default_instance_->InitAsDefaultInstance();
  SendPeerMessageRequest::default_instance_->InitAsDefaultInstance();
  SendPeerMessageResponse::default_instance_->InitAsDefaultInstance();
  RecvPeerMessageResponse::default_instance_->InitAsDefaultInstance();
  PushMessageRequest::default_instance_->InitAsDefaultInstance();
  PushMessageResponse::default_instance_->InitAsDefaultInstance();
  PeerPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_peer_5fserver_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_peer_5fserver_2eproto_once_);
void protobuf_AddDesc_peer_5fserver_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_peer_5fserver_2eproto_once_,
                 &protobuf_AddDesc_peer_5fserver_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_peer_5fserver_2eproto {
  StaticDescriptorInitializer_peer_5fserver_2eproto() {
    protobuf_AddDesc_peer_5fserver_2eproto();
  }
} static_descriptor_initializer_peer_5fserver_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GetPeerMessageRequest::kCidFieldNumber;
const int GetPeerMessageRequest::kStartMsgidFieldNumber;
const int GetPeerMessageRequest::kCountFieldNumber;
#endif  // !_MSC_VER

GetPeerMessageRequest::GetPeerMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetPeerMessageRequest::InitAsDefaultInstance() {
}

GetPeerMessageRequest::GetPeerMessageRequest(const GetPeerMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetPeerMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_msgid_ = GOOGLE_LONGLONG(0);
  count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPeerMessageRequest::~GetPeerMessageRequest() {
  SharedDtor();
}

void GetPeerMessageRequest::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPeerMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPeerMessageRequest& GetPeerMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_peer_5fserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();
#endif
  return *default_instance_;
}

GetPeerMessageRequest* GetPeerMessageRequest::default_instance_ = NULL;

GetPeerMessageRequest* GetPeerMessageRequest::New() const {
  return new GetPeerMessageRequest;
}

void GetPeerMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    start_msgid_ = GOOGLE_LONGLONG(0);
    count_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetPeerMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_msgid;
        break;
      }

      // optional int64 start_msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_msgid_)));
          set_has_start_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int64 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPeerMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional int64 start_msgid = 2;
  if (has_start_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_msgid(), output);
  }

  // optional int64 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }

}

int GetPeerMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional int64 start_msgid = 2;
    if (has_start_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_msgid());
    }

    // optional int64 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPeerMessageRequest*>(&from));
}

void GetPeerMessageRequest::MergeFrom(const GetPeerMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_start_msgid()) {
      set_start_msgid(from.start_msgid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void GetPeerMessageRequest::CopyFrom(const GetPeerMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerMessageRequest::IsInitialized() const {

  return true;
}

void GetPeerMessageRequest::Swap(GetPeerMessageRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(start_msgid_, other->start_msgid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPeerMessageRequest::GetTypeName() const {
  return "gim.GetPeerMessageRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPeerMessageResponse::kLastMsgidFieldNumber;
const int GetPeerMessageResponse::kMsgsFieldNumber;
#endif  // !_MSC_VER

GetPeerMessageResponse::GetPeerMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetPeerMessageResponse::InitAsDefaultInstance() {
}

GetPeerMessageResponse::GetPeerMessageResponse(const GetPeerMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetPeerMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  last_msgid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPeerMessageResponse::~GetPeerMessageResponse() {
  SharedDtor();
}

void GetPeerMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPeerMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPeerMessageResponse& GetPeerMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_peer_5fserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();
#endif
  return *default_instance_;
}

GetPeerMessageResponse* GetPeerMessageResponse::default_instance_ = NULL;

GetPeerMessageResponse* GetPeerMessageResponse::New() const {
  return new GetPeerMessageResponse;
}

void GetPeerMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_msgid_ = GOOGLE_LONGLONG(0);
  }
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetPeerMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_msgid_)));
          set_has_last_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgs;
        break;
      }

      // repeated .gim.Message msgs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPeerMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 last_msgid = 1;
  if (has_last_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_msgid(), output);
  }

  // repeated .gim.Message msgs = 2;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->msgs(i), output);
  }

}

int GetPeerMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_msgid = 1;
    if (has_last_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_msgid());
    }

  }
  // repeated .gim.Message msgs = 2;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPeerMessageResponse*>(&from));
}

void GetPeerMessageResponse::MergeFrom(const GetPeerMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_msgid()) {
      set_last_msgid(from.last_msgid());
    }
  }
}

void GetPeerMessageResponse::CopyFrom(const GetPeerMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerMessageResponse::IsInitialized() const {

  return true;
}

void GetPeerMessageResponse::Swap(GetPeerMessageResponse* other) {
  if (other != this) {
    std::swap(last_msgid_, other->last_msgid_);
    msgs_.Swap(&other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPeerMessageResponse::GetTypeName() const {
  return "gim.GetPeerMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SendPeerMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

SendPeerMessageRequest::SendPeerMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SendPeerMessageRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_ = const_cast< ::gim::Message*>(
      ::gim::Message::internal_default_instance());
#else
  msg_ = const_cast< ::gim::Message*>(&::gim::Message::default_instance());
#endif
}

SendPeerMessageRequest::SendPeerMessageRequest(const SendPeerMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SendPeerMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendPeerMessageRequest::~SendPeerMessageRequest() {
  SharedDtor();
}

void SendPeerMessageRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_;
  }
}

void SendPeerMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendPeerMessageRequest& SendPeerMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_peer_5fserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();
#endif
  return *default_instance_;
}

SendPeerMessageRequest* SendPeerMessageRequest::default_instance_ = NULL;

SendPeerMessageRequest* SendPeerMessageRequest::New() const {
  return new SendPeerMessageRequest;
}

void SendPeerMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::gim::Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SendPeerMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gim.Message msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendPeerMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gim.Message msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->msg(), output);
  }

}

int SendPeerMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gim.Message msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendPeerMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendPeerMessageRequest*>(&from));
}

void SendPeerMessageRequest::MergeFrom(const SendPeerMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::gim::Message::MergeFrom(from.msg());
    }
  }
}

void SendPeerMessageRequest::CopyFrom(const SendPeerMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPeerMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SendPeerMessageRequest::Swap(SendPeerMessageRequest* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendPeerMessageRequest::GetTypeName() const {
  return "gim.SendPeerMessageRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SendPeerMessageResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

SendPeerMessageResponse::SendPeerMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SendPeerMessageResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_ = const_cast< ::gim::Message*>(
      ::gim::Message::internal_default_instance());
#else
  msg_ = const_cast< ::gim::Message*>(&::gim::Message::default_instance());
#endif
}

SendPeerMessageResponse::SendPeerMessageResponse(const SendPeerMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SendPeerMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendPeerMessageResponse::~SendPeerMessageResponse() {
  SharedDtor();
}

void SendPeerMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_;
  }
}

void SendPeerMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendPeerMessageResponse& SendPeerMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_peer_5fserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();
#endif
  return *default_instance_;
}

SendPeerMessageResponse* SendPeerMessageResponse::default_instance_ = NULL;

SendPeerMessageResponse* SendPeerMessageResponse::New() const {
  return new SendPeerMessageResponse;
}

void SendPeerMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::gim::Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SendPeerMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gim.Message msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendPeerMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gim.Message msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->msg(), output);
  }

}

int SendPeerMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gim.Message msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendPeerMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendPeerMessageResponse*>(&from));
}

void SendPeerMessageResponse::MergeFrom(const SendPeerMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::gim::Message::MergeFrom(from.msg());
    }
  }
}

void SendPeerMessageResponse::CopyFrom(const SendPeerMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPeerMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SendPeerMessageResponse::Swap(SendPeerMessageResponse* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendPeerMessageResponse::GetTypeName() const {
  return "gim.SendPeerMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RecvPeerMessageResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

RecvPeerMessageResponse::RecvPeerMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RecvPeerMessageResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_ = const_cast< ::gim::Message*>(
      ::gim::Message::internal_default_instance());
#else
  msg_ = const_cast< ::gim::Message*>(&::gim::Message::default_instance());
#endif
}

RecvPeerMessageResponse::RecvPeerMessageResponse(const RecvPeerMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RecvPeerMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvPeerMessageResponse::~RecvPeerMessageResponse() {
  SharedDtor();
}

void RecvPeerMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_;
  }
}

void RecvPeerMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RecvPeerMessageResponse& RecvPeerMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_peer_5fserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();
#endif
  return *default_instance_;
}

RecvPeerMessageResponse* RecvPeerMessageResponse::default_instance_ = NULL;

RecvPeerMessageResponse* RecvPeerMessageResponse::New() const {
  return new RecvPeerMessageResponse;
}

void RecvPeerMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::gim::Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RecvPeerMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gim.Message msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecvPeerMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gim.Message msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->msg(), output);
  }

}

int RecvPeerMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gim.Message msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvPeerMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RecvPeerMessageResponse*>(&from));
}

void RecvPeerMessageResponse::MergeFrom(const RecvPeerMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::gim::Message::MergeFrom(from.msg());
    }
  }
}

void RecvPeerMessageResponse::CopyFrom(const RecvPeerMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvPeerMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RecvPeerMessageResponse::Swap(RecvPeerMessageResponse* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RecvPeerMessageResponse::GetTypeName() const {
  return "gim.RecvPeerMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PushMessageRequest::kSnFieldNumber;
const int PushMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

PushMessageRequest::PushMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PushMessageRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_ = const_cast< ::gim::Message*>(
      ::gim::Message::internal_default_instance());
#else
  msg_ = const_cast< ::gim::Message*>(&::gim::Message::default_instance());
#endif
}

PushMessageRequest::PushMessageRequest(const PushMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PushMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMessageRequest::~PushMessageRequest() {
  SharedDtor();
}

void PushMessageRequest::SharedDtor() {
  if (sn_ != &::google::protobuf::internal::kEmptyString) {
    delete sn_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_;
  }
}

void PushMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushMessageRequest& PushMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_peer_5fserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();
#endif
  return *default_instance_;
}

PushMessageRequest* PushMessageRequest::default_instance_ = NULL;

PushMessageRequest* PushMessageRequest::New() const {
  return new PushMessageRequest;
}

void PushMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sn()) {
      if (sn_ != &::google::protobuf::internal::kEmptyString) {
        sn_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != NULL) msg_->::gim::Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PushMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .gim.Message msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sn = 1;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sn(), output);
  }

  // required .gim.Message msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->msg(), output);
  }

}

int PushMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sn = 1;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

    // required .gim.Message msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushMessageRequest*>(&from));
}

void PushMessageRequest::MergeFrom(const PushMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_msg()) {
      mutable_msg()->::gim::Message::MergeFrom(from.msg());
    }
  }
}

void PushMessageRequest::CopyFrom(const PushMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PushMessageRequest::Swap(PushMessageRequest* other) {
  if (other != this) {
    std::swap(sn_, other->sn_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushMessageRequest::GetTypeName() const {
  return "gim.PushMessageRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PushMessageResponse::kSnFieldNumber;
const int PushMessageResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

PushMessageResponse::PushMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PushMessageResponse::InitAsDefaultInstance() {
}

PushMessageResponse::PushMessageResponse(const PushMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PushMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMessageResponse::~PushMessageResponse() {
  SharedDtor();
}

void PushMessageResponse::SharedDtor() {
  if (sn_ != &::google::protobuf::internal::kEmptyString) {
    delete sn_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PushMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushMessageResponse& PushMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_peer_5fserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();
#endif
  return *default_instance_;
}

PushMessageResponse* PushMessageResponse::default_instance_ = NULL;

PushMessageResponse* PushMessageResponse::New() const {
  return new PushMessageResponse;
}

void PushMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sn()) {
      if (sn_ != &::google::protobuf::internal::kEmptyString) {
        sn_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PushMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sn = 1;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sn(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

}

int PushMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sn = 1;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushMessageResponse*>(&from));
}

void PushMessageResponse::MergeFrom(const PushMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void PushMessageResponse::CopyFrom(const PushMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PushMessageResponse::Swap(PushMessageResponse* other) {
  if (other != this) {
    std::swap(sn_, other->sn_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PushMessageResponse::GetTypeName() const {
  return "gim.PushMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PeerPacket::kCmdFieldNumber;
const int PeerPacket::kGetPeerMsgReqFieldNumber;
const int PeerPacket::kGetPeerMsgRespFieldNumber;
const int PeerPacket::kSendPeerMsgReqFieldNumber;
const int PeerPacket::kSendPeerMsgRespFieldNumber;
const int PeerPacket::kRecvPeerMsgRespFieldNumber;
#endif  // !_MSC_VER

PeerPacket::PeerPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PeerPacket::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  get_peer_msg_req_ = const_cast< ::gim::GetPeerMessageRequest*>(
      ::gim::GetPeerMessageRequest::internal_default_instance());
#else
  get_peer_msg_req_ = const_cast< ::gim::GetPeerMessageRequest*>(&::gim::GetPeerMessageRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  get_peer_msg_resp_ = const_cast< ::gim::GetPeerMessageResponse*>(
      ::gim::GetPeerMessageResponse::internal_default_instance());
#else
  get_peer_msg_resp_ = const_cast< ::gim::GetPeerMessageResponse*>(&::gim::GetPeerMessageResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  send_peer_msg_req_ = const_cast< ::gim::SendPeerMessageRequest*>(
      ::gim::SendPeerMessageRequest::internal_default_instance());
#else
  send_peer_msg_req_ = const_cast< ::gim::SendPeerMessageRequest*>(&::gim::SendPeerMessageRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  send_peer_msg_resp_ = const_cast< ::gim::SendPeerMessageResponse*>(
      ::gim::SendPeerMessageResponse::internal_default_instance());
#else
  send_peer_msg_resp_ = const_cast< ::gim::SendPeerMessageResponse*>(&::gim::SendPeerMessageResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  recv_peer_msg_resp_ = const_cast< ::gim::RecvPeerMessageResponse*>(
      ::gim::RecvPeerMessageResponse::internal_default_instance());
#else
  recv_peer_msg_resp_ = const_cast< ::gim::RecvPeerMessageResponse*>(&::gim::RecvPeerMessageResponse::default_instance());
#endif
}

PeerPacket::PeerPacket(const PeerPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PeerPacket::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  get_peer_msg_req_ = NULL;
  get_peer_msg_resp_ = NULL;
  send_peer_msg_req_ = NULL;
  send_peer_msg_resp_ = NULL;
  recv_peer_msg_resp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerPacket::~PeerPacket() {
  SharedDtor();
}

void PeerPacket::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete get_peer_msg_req_;
    delete get_peer_msg_resp_;
    delete send_peer_msg_req_;
    delete send_peer_msg_resp_;
    delete recv_peer_msg_resp_;
  }
}

void PeerPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PeerPacket& PeerPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_peer_5fserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();
#endif
  return *default_instance_;
}

PeerPacket* PeerPacket::default_instance_ = NULL;

PeerPacket* PeerPacket::New() const {
  return new PeerPacket;
}

void PeerPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_get_peer_msg_req()) {
      if (get_peer_msg_req_ != NULL) get_peer_msg_req_->::gim::GetPeerMessageRequest::Clear();
    }
    if (has_get_peer_msg_resp()) {
      if (get_peer_msg_resp_ != NULL) get_peer_msg_resp_->::gim::GetPeerMessageResponse::Clear();
    }
    if (has_send_peer_msg_req()) {
      if (send_peer_msg_req_ != NULL) send_peer_msg_req_->::gim::SendPeerMessageRequest::Clear();
    }
    if (has_send_peer_msg_resp()) {
      if (send_peer_msg_resp_ != NULL) send_peer_msg_resp_->::gim::SendPeerMessageResponse::Clear();
    }
    if (has_recv_peer_msg_resp()) {
      if (recv_peer_msg_resp_ != NULL) recv_peer_msg_resp_->::gim::RecvPeerMessageResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PeerPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_get_peer_msg_req;
        break;
      }

      // optional .gim.GetPeerMessageRequest get_peer_msg_req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_peer_msg_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_peer_msg_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_get_peer_msg_resp;
        break;
      }

      // optional .gim.GetPeerMessageResponse get_peer_msg_resp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_peer_msg_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_peer_msg_resp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_send_peer_msg_req;
        break;
      }

      // optional .gim.SendPeerMessageRequest send_peer_msg_req = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_peer_msg_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_peer_msg_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_send_peer_msg_resp;
        break;
      }

      // optional .gim.SendPeerMessageResponse send_peer_msg_resp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_peer_msg_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_peer_msg_resp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recv_peer_msg_resp;
        break;
      }

      // optional .gim.RecvPeerMessageResponse recv_peer_msg_resp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recv_peer_msg_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recv_peer_msg_resp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeerPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // optional .gim.GetPeerMessageRequest get_peer_msg_req = 2;
  if (has_get_peer_msg_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->get_peer_msg_req(), output);
  }

  // optional .gim.GetPeerMessageResponse get_peer_msg_resp = 3;
  if (has_get_peer_msg_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->get_peer_msg_resp(), output);
  }

  // optional .gim.SendPeerMessageRequest send_peer_msg_req = 4;
  if (has_send_peer_msg_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->send_peer_msg_req(), output);
  }

  // optional .gim.SendPeerMessageResponse send_peer_msg_resp = 5;
  if (has_send_peer_msg_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->send_peer_msg_resp(), output);
  }

  // optional .gim.RecvPeerMessageResponse recv_peer_msg_resp = 6;
  if (has_recv_peer_msg_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->recv_peer_msg_resp(), output);
  }

}

int PeerPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional .gim.GetPeerMessageRequest get_peer_msg_req = 2;
    if (has_get_peer_msg_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_peer_msg_req());
    }

    // optional .gim.GetPeerMessageResponse get_peer_msg_resp = 3;
    if (has_get_peer_msg_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_peer_msg_resp());
    }

    // optional .gim.SendPeerMessageRequest send_peer_msg_req = 4;
    if (has_send_peer_msg_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_peer_msg_req());
    }

    // optional .gim.SendPeerMessageResponse send_peer_msg_resp = 5;
    if (has_send_peer_msg_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_peer_msg_resp());
    }

    // optional .gim.RecvPeerMessageResponse recv_peer_msg_resp = 6;
    if (has_recv_peer_msg_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recv_peer_msg_resp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PeerPacket*>(&from));
}

void PeerPacket::MergeFrom(const PeerPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_get_peer_msg_req()) {
      mutable_get_peer_msg_req()->::gim::GetPeerMessageRequest::MergeFrom(from.get_peer_msg_req());
    }
    if (from.has_get_peer_msg_resp()) {
      mutable_get_peer_msg_resp()->::gim::GetPeerMessageResponse::MergeFrom(from.get_peer_msg_resp());
    }
    if (from.has_send_peer_msg_req()) {
      mutable_send_peer_msg_req()->::gim::SendPeerMessageRequest::MergeFrom(from.send_peer_msg_req());
    }
    if (from.has_send_peer_msg_resp()) {
      mutable_send_peer_msg_resp()->::gim::SendPeerMessageResponse::MergeFrom(from.send_peer_msg_resp());
    }
    if (from.has_recv_peer_msg_resp()) {
      mutable_recv_peer_msg_resp()->::gim::RecvPeerMessageResponse::MergeFrom(from.recv_peer_msg_resp());
    }
  }
}

void PeerPacket::CopyFrom(const PeerPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_send_peer_msg_req()) {
    if (!this->send_peer_msg_req().IsInitialized()) return false;
  }
  if (has_send_peer_msg_resp()) {
    if (!this->send_peer_msg_resp().IsInitialized()) return false;
  }
  if (has_recv_peer_msg_resp()) {
    if (!this->recv_peer_msg_resp().IsInitialized()) return false;
  }
  return true;
}

void PeerPacket::Swap(PeerPacket* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(get_peer_msg_req_, other->get_peer_msg_req_);
    std::swap(get_peer_msg_resp_, other->get_peer_msg_resp_);
    std::swap(send_peer_msg_req_, other->send_peer_msg_req_);
    std::swap(send_peer_msg_resp_, other->send_peer_msg_resp_);
    std::swap(recv_peer_msg_resp_, other->recv_peer_msg_resp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PeerPacket::GetTypeName() const {
  return "gim.PeerPacket";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gim

// @@protoc_insertion_point(global_scope)
