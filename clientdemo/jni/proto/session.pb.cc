// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace gim {

void protobuf_ShutdownFile_session_2eproto() {
  delete Sess::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_session_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_session_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::gim::protobuf_AddDesc_pair_2eproto();
  Sess::default_instance_ = new Sess();
  Sess::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_session_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_session_2eproto_once_);
void protobuf_AddDesc_session_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_session_2eproto_once_,
                 &protobuf_AddDesc_session_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_session_2eproto {
  StaticDescriptorInitializer_session_2eproto() {
    protobuf_AddDesc_session_2eproto();
  }
} static_descriptor_initializer_session_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Sess::kCidFieldNumber;
const int Sess::kLasttimeFieldNumber;
const int Sess::kSessidFieldNumber;
const int Sess::kSvidFieldNumber;
const int Sess::kKvsFieldNumber;
#endif  // !_MSC_VER

Sess::Sess()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Sess::InitAsDefaultInstance() {
}

Sess::Sess(const Sess& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Sess::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lasttime_ = GOOGLE_LONGLONG(0);
  sessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sess::~Sess() {
  SharedDtor();
}

void Sess::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::kEmptyString) {
    delete cid_;
  }
  if (sessid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Sess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Sess& Sess::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_session_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
#endif
  return *default_instance_;
}

Sess* Sess::default_instance_ = NULL;

Sess* Sess::New() const {
  return new Sess;
}

void Sess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::kEmptyString) {
        cid_->clear();
      }
    }
    lasttime_ = GOOGLE_LONGLONG(0);
    if (has_sessid()) {
      if (sessid_ != &::google::protobuf::internal::kEmptyString) {
        sessid_->clear();
      }
    }
    svid_ = 0;
  }
  kvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Sess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lasttime;
        break;
      }

      // optional int64 lasttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sessid;
        break;
      }

      // optional string sessid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_svid;
        break;
      }

      // optional int32 svid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svid_)));
          set_has_svid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kvs;
        break;
      }

      // repeated .gim.Pair kvs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kvs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }

  // optional int64 lasttime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lasttime(), output);
  }

  // optional string sessid = 3;
  if (has_sessid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sessid(), output);
  }

  // optional int32 svid = 4;
  if (has_svid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->svid(), output);
  }

  // repeated .gim.Pair kvs = 5;
  for (int i = 0; i < this->kvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->kvs(i), output);
  }

}

int Sess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional int64 lasttime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

    // optional string sessid = 3;
    if (has_sessid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessid());
    }

    // optional int32 svid = 4;
    if (has_svid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svid());
    }

  }
  // repeated .gim.Pair kvs = 5;
  total_size += 1 * this->kvs_size();
  for (int i = 0; i < this->kvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sess::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Sess*>(&from));
}

void Sess::MergeFrom(const Sess& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvs_.MergeFrom(from.kvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_sessid()) {
      set_sessid(from.sessid());
    }
    if (from.has_svid()) {
      set_svid(from.svid());
    }
  }
}

void Sess::CopyFrom(const Sess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sess::IsInitialized() const {

  for (int i = 0; i < kvs_size(); i++) {
    if (!this->kvs(i).IsInitialized()) return false;
  }
  return true;
}

void Sess::Swap(Sess* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(sessid_, other->sessid_);
    std::swap(svid_, other->svid_);
    kvs_.Swap(&other->kvs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Sess::GetTypeName() const {
  return "gim.Sess";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gim

// @@protoc_insertion_point(global_scope)
