// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "peer_server.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gim {

namespace {

const ::google::protobuf::Descriptor* GetPeerMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPeerMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPeerMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPeerMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendPeerMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendPeerMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendPeerMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendPeerMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvPeerMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvPeerMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_peer_5fserver_2eproto() {
  protobuf_AddDesc_peer_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "peer_server.proto");
  GOOGLE_CHECK(file != NULL);
  GetPeerMessageRequest_descriptor_ = file->message_type(0);
  static const int GetPeerMessageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerMessageRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerMessageRequest, start_msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerMessageRequest, count_),
  };
  GetPeerMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPeerMessageRequest_descriptor_,
      GetPeerMessageRequest::default_instance_,
      GetPeerMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPeerMessageRequest));
  GetPeerMessageResponse_descriptor_ = file->message_type(1);
  static const int GetPeerMessageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerMessageResponse, last_msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerMessageResponse, msgs_),
  };
  GetPeerMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPeerMessageResponse_descriptor_,
      GetPeerMessageResponse::default_instance_,
      GetPeerMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPeerMessageResponse));
  SendPeerMessageRequest_descriptor_ = file->message_type(2);
  static const int SendPeerMessageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPeerMessageRequest, msg_),
  };
  SendPeerMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendPeerMessageRequest_descriptor_,
      SendPeerMessageRequest::default_instance_,
      SendPeerMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPeerMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPeerMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendPeerMessageRequest));
  SendPeerMessageResponse_descriptor_ = file->message_type(3);
  static const int SendPeerMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPeerMessageResponse, msg_),
  };
  SendPeerMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendPeerMessageResponse_descriptor_,
      SendPeerMessageResponse::default_instance_,
      SendPeerMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPeerMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPeerMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendPeerMessageResponse));
  RecvPeerMessageResponse_descriptor_ = file->message_type(4);
  static const int RecvPeerMessageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvPeerMessageResponse, msg_),
  };
  RecvPeerMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecvPeerMessageResponse_descriptor_,
      RecvPeerMessageResponse::default_instance_,
      RecvPeerMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvPeerMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvPeerMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecvPeerMessageResponse));
  PushMessageRequest_descriptor_ = file->message_type(5);
  static const int PushMessageRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageRequest, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageRequest, msg_),
  };
  PushMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMessageRequest_descriptor_,
      PushMessageRequest::default_instance_,
      PushMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMessageRequest));
  PushMessageResponse_descriptor_ = file->message_type(6);
  static const int PushMessageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageResponse, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageResponse, status_),
  };
  PushMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMessageResponse_descriptor_,
      PushMessageResponse::default_instance_,
      PushMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMessageResponse));
  PeerPacket_descriptor_ = file->message_type(7);
  static const int PeerPacket_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerPacket, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerPacket, get_peer_msg_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerPacket, get_peer_msg_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerPacket, send_peer_msg_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerPacket, send_peer_msg_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerPacket, recv_peer_msg_resp_),
  };
  PeerPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeerPacket_descriptor_,
      PeerPacket::default_instance_,
      PeerPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeerPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_peer_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPeerMessageRequest_descriptor_, &GetPeerMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPeerMessageResponse_descriptor_, &GetPeerMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendPeerMessageRequest_descriptor_, &SendPeerMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendPeerMessageResponse_descriptor_, &SendPeerMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecvPeerMessageResponse_descriptor_, &RecvPeerMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMessageRequest_descriptor_, &PushMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMessageResponse_descriptor_, &PushMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeerPacket_descriptor_, &PeerPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_peer_5fserver_2eproto() {
  delete GetPeerMessageRequest::default_instance_;
  delete GetPeerMessageRequest_reflection_;
  delete GetPeerMessageResponse::default_instance_;
  delete GetPeerMessageResponse_reflection_;
  delete SendPeerMessageRequest::default_instance_;
  delete SendPeerMessageRequest_reflection_;
  delete SendPeerMessageResponse::default_instance_;
  delete SendPeerMessageResponse_reflection_;
  delete RecvPeerMessageResponse::default_instance_;
  delete RecvPeerMessageResponse_reflection_;
  delete PushMessageRequest::default_instance_;
  delete PushMessageRequest_reflection_;
  delete PushMessageResponse::default_instance_;
  delete PushMessageResponse_reflection_;
  delete PeerPacket::default_instance_;
  delete PeerPacket_reflection_;
}

void protobuf_AddDesc_peer_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gim::protobuf_AddDesc_message_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021peer_server.proto\022\003gim\032\rmessage.proto\""
    "H\n\025GetPeerMessageRequest\022\013\n\003cid\030\001 \001(\t\022\023\n"
    "\013start_msgid\030\002 \001(\003\022\r\n\005count\030\003 \001(\003\"H\n\026Get"
    "PeerMessageResponse\022\022\n\nlast_msgid\030\001 \001(\003\022"
    "\032\n\004msgs\030\002 \003(\0132\014.gim.Message\"3\n\026SendPeerM"
    "essageRequest\022\031\n\003msg\030\001 \002(\0132\014.gim.Message"
    "\"4\n\027SendPeerMessageResponse\022\031\n\003msg\030\001 \002(\013"
    "2\014.gim.Message\"4\n\027RecvPeerMessageRespons"
    "e\022\031\n\003msg\030\001 \002(\0132\014.gim.Message\";\n\022PushMess"
    "ageRequest\022\n\n\002sn\030\001 \002(\t\022\031\n\003msg\030\002 \002(\0132\014.gi"
    "m.Message\"1\n\023PushMessageResponse\022\n\n\002sn\030\001"
    " \002(\t\022\016\n\006status\030\002 \002(\005\"\263\002\n\nPeerPacket\022\013\n\003c"
    "md\030\001 \002(\005\0224\n\020get_peer_msg_req\030\002 \001(\0132\032.gim"
    ".GetPeerMessageRequest\0226\n\021get_peer_msg_r"
    "esp\030\003 \001(\0132\033.gim.GetPeerMessageResponse\0226"
    "\n\021send_peer_msg_req\030\004 \001(\0132\033.gim.SendPeer"
    "MessageRequest\0228\n\022send_peer_msg_resp\030\005 \001"
    "(\0132\034.gim.SendPeerMessageResponse\0228\n\022recv"
    "_peer_msg_resp\030\006 \001(\0132\034.gim.RecvPeerMessa"
    "geResponse", 770);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "peer_server.proto", &protobuf_RegisterTypes);
  GetPeerMessageRequest::default_instance_ = new GetPeerMessageRequest();
  GetPeerMessageResponse::default_instance_ = new GetPeerMessageResponse();
  SendPeerMessageRequest::default_instance_ = new SendPeerMessageRequest();
  SendPeerMessageResponse::default_instance_ = new SendPeerMessageResponse();
  RecvPeerMessageResponse::default_instance_ = new RecvPeerMessageResponse();
  PushMessageRequest::default_instance_ = new PushMessageRequest();
  PushMessageResponse::default_instance_ = new PushMessageResponse();
  PeerPacket::default_instance_ = new PeerPacket();
  GetPeerMessageRequest::default_instance_->InitAsDefaultInstance();
  GetPeerMessageResponse::default_instance_->InitAsDefaultInstance();
  SendPeerMessageRequest::default_instance_->InitAsDefaultInstance();
  SendPeerMessageResponse::default_instance_->InitAsDefaultInstance();
  RecvPeerMessageResponse::default_instance_->InitAsDefaultInstance();
  PushMessageRequest::default_instance_->InitAsDefaultInstance();
  PushMessageResponse::default_instance_->InitAsDefaultInstance();
  PeerPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_peer_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_peer_5fserver_2eproto {
  StaticDescriptorInitializer_peer_5fserver_2eproto() {
    protobuf_AddDesc_peer_5fserver_2eproto();
  }
} static_descriptor_initializer_peer_5fserver_2eproto_;


// ===================================================================

const ::std::string GetPeerMessageRequest::_default_cid_;
#ifndef _MSC_VER
const int GetPeerMessageRequest::kCidFieldNumber;
const int GetPeerMessageRequest::kStartMsgidFieldNumber;
const int GetPeerMessageRequest::kCountFieldNumber;
#endif  // !_MSC_VER

GetPeerMessageRequest::GetPeerMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPeerMessageRequest::InitAsDefaultInstance() {
}

GetPeerMessageRequest::GetPeerMessageRequest(const GetPeerMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPeerMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&_default_cid_);
  start_msgid_ = GOOGLE_LONGLONG(0);
  count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPeerMessageRequest::~GetPeerMessageRequest() {
  SharedDtor();
}

void GetPeerMessageRequest::SharedDtor() {
  if (cid_ != &_default_cid_) {
    delete cid_;
  }
  if (this != default_instance_) {
  }
}

void GetPeerMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPeerMessageRequest_descriptor_;
}

const GetPeerMessageRequest& GetPeerMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();  return *default_instance_;
}

GetPeerMessageRequest* GetPeerMessageRequest::default_instance_ = NULL;

GetPeerMessageRequest* GetPeerMessageRequest::New() const {
  return new GetPeerMessageRequest;
}

void GetPeerMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (cid_ != &_default_cid_) {
        cid_->clear();
      }
    }
    start_msgid_ = GOOGLE_LONGLONG(0);
    count_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPeerMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_msgid;
        break;
      }
      
      // optional int64 start_msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_msgid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int64 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPeerMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cid(), output);
  }
  
  // optional int64 start_msgid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_msgid(), output);
  }
  
  // optional int64 count = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPeerMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }
  
  // optional int64 start_msgid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_msgid(), target);
  }
  
  // optional int64 count = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPeerMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }
    
    // optional int64 start_msgid = 2;
    if (has_start_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_msgid());
    }
    
    // optional int64 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPeerMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPeerMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPeerMessageRequest::MergeFrom(const GetPeerMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cid(from.cid());
    }
    if (from._has_bit(1)) {
      set_start_msgid(from.start_msgid());
    }
    if (from._has_bit(2)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPeerMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerMessageRequest::CopyFrom(const GetPeerMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerMessageRequest::IsInitialized() const {
  
  return true;
}

void GetPeerMessageRequest::Swap(GetPeerMessageRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(start_msgid_, other->start_msgid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPeerMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPeerMessageRequest_descriptor_;
  metadata.reflection = GetPeerMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPeerMessageResponse::kLastMsgidFieldNumber;
const int GetPeerMessageResponse::kMsgsFieldNumber;
#endif  // !_MSC_VER

GetPeerMessageResponse::GetPeerMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPeerMessageResponse::InitAsDefaultInstance() {
}

GetPeerMessageResponse::GetPeerMessageResponse(const GetPeerMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPeerMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  last_msgid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPeerMessageResponse::~GetPeerMessageResponse() {
  SharedDtor();
}

void GetPeerMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPeerMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPeerMessageResponse_descriptor_;
}

const GetPeerMessageResponse& GetPeerMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();  return *default_instance_;
}

GetPeerMessageResponse* GetPeerMessageResponse::default_instance_ = NULL;

GetPeerMessageResponse* GetPeerMessageResponse::New() const {
  return new GetPeerMessageResponse;
}

void GetPeerMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_msgid_ = GOOGLE_LONGLONG(0);
  }
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPeerMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_msgid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgs;
        break;
      }
      
      // repeated .gim.Message msgs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPeerMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 last_msgid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_msgid(), output);
  }
  
  // repeated .gim.Message msgs = 2;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msgs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPeerMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 last_msgid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_msgid(), target);
  }
  
  // repeated .gim.Message msgs = 2;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msgs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPeerMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_msgid = 1;
    if (has_last_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_msgid());
    }
    
  }
  // repeated .gim.Message msgs = 2;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPeerMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPeerMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPeerMessageResponse::MergeFrom(const GetPeerMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_last_msgid(from.last_msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPeerMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerMessageResponse::CopyFrom(const GetPeerMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerMessageResponse::IsInitialized() const {
  
  return true;
}

void GetPeerMessageResponse::Swap(GetPeerMessageResponse* other) {
  if (other != this) {
    std::swap(last_msgid_, other->last_msgid_);
    msgs_.Swap(&other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPeerMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPeerMessageResponse_descriptor_;
  metadata.reflection = GetPeerMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendPeerMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

SendPeerMessageRequest::SendPeerMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendPeerMessageRequest::InitAsDefaultInstance() {
  msg_ = const_cast< ::gim::Message*>(&::gim::Message::default_instance());
}

SendPeerMessageRequest::SendPeerMessageRequest(const SendPeerMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendPeerMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendPeerMessageRequest::~SendPeerMessageRequest() {
  SharedDtor();
}

void SendPeerMessageRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void SendPeerMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendPeerMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendPeerMessageRequest_descriptor_;
}

const SendPeerMessageRequest& SendPeerMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();  return *default_instance_;
}

SendPeerMessageRequest* SendPeerMessageRequest::default_instance_ = NULL;

SendPeerMessageRequest* SendPeerMessageRequest::New() const {
  return new SendPeerMessageRequest;
}

void SendPeerMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != NULL) msg_->::gim::Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendPeerMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gim.Message msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendPeerMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gim.Message msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendPeerMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gim.Message msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendPeerMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gim.Message msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendPeerMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendPeerMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendPeerMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendPeerMessageRequest::MergeFrom(const SendPeerMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_msg()->::gim::Message::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendPeerMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPeerMessageRequest::CopyFrom(const SendPeerMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPeerMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SendPeerMessageRequest::Swap(SendPeerMessageRequest* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendPeerMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendPeerMessageRequest_descriptor_;
  metadata.reflection = SendPeerMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendPeerMessageResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

SendPeerMessageResponse::SendPeerMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendPeerMessageResponse::InitAsDefaultInstance() {
  msg_ = const_cast< ::gim::Message*>(&::gim::Message::default_instance());
}

SendPeerMessageResponse::SendPeerMessageResponse(const SendPeerMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendPeerMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendPeerMessageResponse::~SendPeerMessageResponse() {
  SharedDtor();
}

void SendPeerMessageResponse::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void SendPeerMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendPeerMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendPeerMessageResponse_descriptor_;
}

const SendPeerMessageResponse& SendPeerMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();  return *default_instance_;
}

SendPeerMessageResponse* SendPeerMessageResponse::default_instance_ = NULL;

SendPeerMessageResponse* SendPeerMessageResponse::New() const {
  return new SendPeerMessageResponse;
}

void SendPeerMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != NULL) msg_->::gim::Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendPeerMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gim.Message msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendPeerMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gim.Message msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendPeerMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gim.Message msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendPeerMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gim.Message msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendPeerMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendPeerMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendPeerMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendPeerMessageResponse::MergeFrom(const SendPeerMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_msg()->::gim::Message::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendPeerMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPeerMessageResponse::CopyFrom(const SendPeerMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPeerMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SendPeerMessageResponse::Swap(SendPeerMessageResponse* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendPeerMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendPeerMessageResponse_descriptor_;
  metadata.reflection = SendPeerMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecvPeerMessageResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

RecvPeerMessageResponse::RecvPeerMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecvPeerMessageResponse::InitAsDefaultInstance() {
  msg_ = const_cast< ::gim::Message*>(&::gim::Message::default_instance());
}

RecvPeerMessageResponse::RecvPeerMessageResponse(const RecvPeerMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecvPeerMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvPeerMessageResponse::~RecvPeerMessageResponse() {
  SharedDtor();
}

void RecvPeerMessageResponse::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void RecvPeerMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvPeerMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvPeerMessageResponse_descriptor_;
}

const RecvPeerMessageResponse& RecvPeerMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();  return *default_instance_;
}

RecvPeerMessageResponse* RecvPeerMessageResponse::default_instance_ = NULL;

RecvPeerMessageResponse* RecvPeerMessageResponse::New() const {
  return new RecvPeerMessageResponse;
}

void RecvPeerMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != NULL) msg_->::gim::Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecvPeerMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gim.Message msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecvPeerMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gim.Message msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecvPeerMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gim.Message msg = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecvPeerMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gim.Message msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvPeerMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecvPeerMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecvPeerMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecvPeerMessageResponse::MergeFrom(const RecvPeerMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_msg()->::gim::Message::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecvPeerMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvPeerMessageResponse::CopyFrom(const RecvPeerMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvPeerMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RecvPeerMessageResponse::Swap(RecvPeerMessageResponse* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecvPeerMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvPeerMessageResponse_descriptor_;
  metadata.reflection = RecvPeerMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PushMessageRequest::_default_sn_;
#ifndef _MSC_VER
const int PushMessageRequest::kSnFieldNumber;
const int PushMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

PushMessageRequest::PushMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushMessageRequest::InitAsDefaultInstance() {
  msg_ = const_cast< ::gim::Message*>(&::gim::Message::default_instance());
}

PushMessageRequest::PushMessageRequest(const PushMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  sn_ = const_cast< ::std::string*>(&_default_sn_);
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMessageRequest::~PushMessageRequest() {
  SharedDtor();
}

void PushMessageRequest::SharedDtor() {
  if (sn_ != &_default_sn_) {
    delete sn_;
  }
  if (this != default_instance_) {
    delete msg_;
  }
}

void PushMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMessageRequest_descriptor_;
}

const PushMessageRequest& PushMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();  return *default_instance_;
}

PushMessageRequest* PushMessageRequest::default_instance_ = NULL;

PushMessageRequest* PushMessageRequest::New() const {
  return new PushMessageRequest;
}

void PushMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sn_ != &_default_sn_) {
        sn_->clear();
      }
    }
    if (_has_bit(1)) {
      if (msg_ != NULL) msg_->::gim::Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required .gim.Message msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sn = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sn(), output);
  }
  
  // required .gim.Message msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sn = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sn(), target);
  }
  
  // required .gim.Message msg = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sn = 1;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }
    
    // required .gim.Message msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMessageRequest::MergeFrom(const PushMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sn(from.sn());
    }
    if (from._has_bit(1)) {
      mutable_msg()->::gim::Message::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMessageRequest::CopyFrom(const PushMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PushMessageRequest::Swap(PushMessageRequest* other) {
  if (other != this) {
    std::swap(sn_, other->sn_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMessageRequest_descriptor_;
  metadata.reflection = PushMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PushMessageResponse::_default_sn_;
#ifndef _MSC_VER
const int PushMessageResponse::kSnFieldNumber;
const int PushMessageResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

PushMessageResponse::PushMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushMessageResponse::InitAsDefaultInstance() {
}

PushMessageResponse::PushMessageResponse(const PushMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  sn_ = const_cast< ::std::string*>(&_default_sn_);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMessageResponse::~PushMessageResponse() {
  SharedDtor();
}

void PushMessageResponse::SharedDtor() {
  if (sn_ != &_default_sn_) {
    delete sn_;
  }
  if (this != default_instance_) {
  }
}

void PushMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMessageResponse_descriptor_;
}

const PushMessageResponse& PushMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();  return *default_instance_;
}

PushMessageResponse* PushMessageResponse::default_instance_ = NULL;

PushMessageResponse* PushMessageResponse::New() const {
  return new PushMessageResponse;
}

void PushMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sn_ != &_default_sn_) {
        sn_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sn = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sn(), output);
  }
  
  // required int32 status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sn = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sn(), target);
  }
  
  // required int32 status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sn = 1;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }
    
    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMessageResponse::MergeFrom(const PushMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sn(from.sn());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMessageResponse::CopyFrom(const PushMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PushMessageResponse::Swap(PushMessageResponse* other) {
  if (other != this) {
    std::swap(sn_, other->sn_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMessageResponse_descriptor_;
  metadata.reflection = PushMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerPacket::kCmdFieldNumber;
const int PeerPacket::kGetPeerMsgReqFieldNumber;
const int PeerPacket::kGetPeerMsgRespFieldNumber;
const int PeerPacket::kSendPeerMsgReqFieldNumber;
const int PeerPacket::kSendPeerMsgRespFieldNumber;
const int PeerPacket::kRecvPeerMsgRespFieldNumber;
#endif  // !_MSC_VER

PeerPacket::PeerPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeerPacket::InitAsDefaultInstance() {
  get_peer_msg_req_ = const_cast< ::gim::GetPeerMessageRequest*>(&::gim::GetPeerMessageRequest::default_instance());
  get_peer_msg_resp_ = const_cast< ::gim::GetPeerMessageResponse*>(&::gim::GetPeerMessageResponse::default_instance());
  send_peer_msg_req_ = const_cast< ::gim::SendPeerMessageRequest*>(&::gim::SendPeerMessageRequest::default_instance());
  send_peer_msg_resp_ = const_cast< ::gim::SendPeerMessageResponse*>(&::gim::SendPeerMessageResponse::default_instance());
  recv_peer_msg_resp_ = const_cast< ::gim::RecvPeerMessageResponse*>(&::gim::RecvPeerMessageResponse::default_instance());
}

PeerPacket::PeerPacket(const PeerPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeerPacket::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  get_peer_msg_req_ = NULL;
  get_peer_msg_resp_ = NULL;
  send_peer_msg_req_ = NULL;
  send_peer_msg_resp_ = NULL;
  recv_peer_msg_resp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerPacket::~PeerPacket() {
  SharedDtor();
}

void PeerPacket::SharedDtor() {
  if (this != default_instance_) {
    delete get_peer_msg_req_;
    delete get_peer_msg_resp_;
    delete send_peer_msg_req_;
    delete send_peer_msg_resp_;
    delete recv_peer_msg_resp_;
  }
}

void PeerPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerPacket_descriptor_;
}

const PeerPacket& PeerPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_peer_5fserver_2eproto();  return *default_instance_;
}

PeerPacket* PeerPacket::default_instance_ = NULL;

PeerPacket* PeerPacket::New() const {
  return new PeerPacket;
}

void PeerPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (_has_bit(1)) {
      if (get_peer_msg_req_ != NULL) get_peer_msg_req_->::gim::GetPeerMessageRequest::Clear();
    }
    if (_has_bit(2)) {
      if (get_peer_msg_resp_ != NULL) get_peer_msg_resp_->::gim::GetPeerMessageResponse::Clear();
    }
    if (_has_bit(3)) {
      if (send_peer_msg_req_ != NULL) send_peer_msg_req_->::gim::SendPeerMessageRequest::Clear();
    }
    if (_has_bit(4)) {
      if (send_peer_msg_resp_ != NULL) send_peer_msg_resp_->::gim::SendPeerMessageResponse::Clear();
    }
    if (_has_bit(5)) {
      if (recv_peer_msg_resp_ != NULL) recv_peer_msg_resp_->::gim::RecvPeerMessageResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeerPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_get_peer_msg_req;
        break;
      }
      
      // optional .gim.GetPeerMessageRequest get_peer_msg_req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_peer_msg_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_peer_msg_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_get_peer_msg_resp;
        break;
      }
      
      // optional .gim.GetPeerMessageResponse get_peer_msg_resp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_peer_msg_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_peer_msg_resp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_send_peer_msg_req;
        break;
      }
      
      // optional .gim.SendPeerMessageRequest send_peer_msg_req = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_peer_msg_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_peer_msg_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_send_peer_msg_resp;
        break;
      }
      
      // optional .gim.SendPeerMessageResponse send_peer_msg_resp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_peer_msg_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_peer_msg_resp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recv_peer_msg_resp;
        break;
      }
      
      // optional .gim.RecvPeerMessageResponse recv_peer_msg_resp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recv_peer_msg_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recv_peer_msg_resp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeerPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional .gim.GetPeerMessageRequest get_peer_msg_req = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_peer_msg_req(), output);
  }
  
  // optional .gim.GetPeerMessageResponse get_peer_msg_resp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_peer_msg_resp(), output);
  }
  
  // optional .gim.SendPeerMessageRequest send_peer_msg_req = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->send_peer_msg_req(), output);
  }
  
  // optional .gim.SendPeerMessageResponse send_peer_msg_resp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->send_peer_msg_resp(), output);
  }
  
  // optional .gim.RecvPeerMessageResponse recv_peer_msg_resp = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->recv_peer_msg_resp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeerPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional .gim.GetPeerMessageRequest get_peer_msg_req = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_peer_msg_req(), target);
  }
  
  // optional .gim.GetPeerMessageResponse get_peer_msg_resp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_peer_msg_resp(), target);
  }
  
  // optional .gim.SendPeerMessageRequest send_peer_msg_req = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->send_peer_msg_req(), target);
  }
  
  // optional .gim.SendPeerMessageResponse send_peer_msg_resp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->send_peer_msg_resp(), target);
  }
  
  // optional .gim.RecvPeerMessageResponse recv_peer_msg_resp = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->recv_peer_msg_resp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeerPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional .gim.GetPeerMessageRequest get_peer_msg_req = 2;
    if (has_get_peer_msg_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_peer_msg_req());
    }
    
    // optional .gim.GetPeerMessageResponse get_peer_msg_resp = 3;
    if (has_get_peer_msg_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_peer_msg_resp());
    }
    
    // optional .gim.SendPeerMessageRequest send_peer_msg_req = 4;
    if (has_send_peer_msg_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_peer_msg_req());
    }
    
    // optional .gim.SendPeerMessageResponse send_peer_msg_resp = 5;
    if (has_send_peer_msg_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_peer_msg_resp());
    }
    
    // optional .gim.RecvPeerMessageResponse recv_peer_msg_resp = 6;
    if (has_recv_peer_msg_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recv_peer_msg_resp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeerPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerPacket::MergeFrom(const PeerPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cmd(from.cmd());
    }
    if (from._has_bit(1)) {
      mutable_get_peer_msg_req()->::gim::GetPeerMessageRequest::MergeFrom(from.get_peer_msg_req());
    }
    if (from._has_bit(2)) {
      mutable_get_peer_msg_resp()->::gim::GetPeerMessageResponse::MergeFrom(from.get_peer_msg_resp());
    }
    if (from._has_bit(3)) {
      mutable_send_peer_msg_req()->::gim::SendPeerMessageRequest::MergeFrom(from.send_peer_msg_req());
    }
    if (from._has_bit(4)) {
      mutable_send_peer_msg_resp()->::gim::SendPeerMessageResponse::MergeFrom(from.send_peer_msg_resp());
    }
    if (from._has_bit(5)) {
      mutable_recv_peer_msg_resp()->::gim::RecvPeerMessageResponse::MergeFrom(from.recv_peer_msg_resp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeerPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerPacket::CopyFrom(const PeerPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_send_peer_msg_req()) {
    if (!this->send_peer_msg_req().IsInitialized()) return false;
  }
  if (has_send_peer_msg_resp()) {
    if (!this->send_peer_msg_resp().IsInitialized()) return false;
  }
  if (has_recv_peer_msg_resp()) {
    if (!this->recv_peer_msg_resp().IsInitialized()) return false;
  }
  return true;
}

void PeerPacket::Swap(PeerPacket* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(get_peer_msg_req_, other->get_peer_msg_req_);
    std::swap(get_peer_msg_resp_, other->get_peer_msg_resp_);
    std::swap(send_peer_msg_req_, other->send_peer_msg_req_);
    std::swap(send_peer_msg_resp_, other->send_peer_msg_resp_);
    std::swap(recv_peer_msg_resp_, other->recv_peer_msg_resp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeerPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerPacket_descriptor_;
  metadata.reflection = PeerPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gim

// @@protoc_insertion_point(global_scope)
